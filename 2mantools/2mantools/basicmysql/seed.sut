(: print | Info | Seed Database :)

(: create-folder | $project-folder | Models :)
(: create-folder | $project-folder | Models/Data :)
(: create-folder | $project-folder | Services :)

(: edit-insert-after | $project-folder | appsettings.Development.json | { :)

  "ConnectionStrings": { "DataStore": "server=$server-dev;port=$port-dev;user=$user-dev;password=$password-dev;database=$database-name;" },
(:)

(: edit-insert-after | $project-folder | appsettings.json | { :)

  "ConnectionStrings": { "DataStore": "server=$server-pub;port=$port-pub;user=$user-pub;password=$password-pub;database=$database-name;" },
(:)

(: edit-create | $project-folder | migrate.sql :)
CREATE DATABASE `$database-name`;
USE `$database-name`;
CREATE TABLE `account` (
  `Id` INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
  `Username` VARCHAR(100) NOT NULL DEFAULT '',
  `Password` VARCHAR(100) NOT NULL DEFAULT '');
(:)

(: edit-create | $project-folder | deploy.sql :)
CREATE DATABASE `$database-name`;
USE `$database-name`;
CREATE TABLE `account` (
  `Id` INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
  `Username` VARCHAR(100) NOT NULL DEFAULT '',
  `Password` VARCHAR(100) NOT NULL DEFAULT '');
(:)

(: edit-create | $project-folder/Services | CustomDesignTimeServices.cs :)
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.Extensions.DependencyInjection;
using System.Linq;

public class CustomDesignTimeServices : IDesignTimeServices {

    public void ConfigureDesignTimeServices(IServiceCollection serviceCollection) {
        serviceCollection.AddSingleton<IPluralizer, CustomPluralizer>();
    }
}

public class CustomPluralizer : IPluralizer {

    string[] esEnds = { "h", "s", "x", "z" };
    string[] vowels = { "a", "e", "i", "o", "u", "y" };

    public string Pluralize(string name) {
        if (name.Length > 0 && esEnds.Contains(name.Substring(name.Length - 1)))
            return name + "es";
        else if (name.Length > 1 && name.EndsWith("y") && !vowels.Contains(name.Substring(name.Length - 2, 1)))
            return name.Substring(0, name.Length - 1) + "ies";
        else 
            return name + "s";
    }

    public string Singularize(string name) {
        return name;
    }
}
(:)

(: edit-create | $project-folder/Models/Data | DataStore.Extension.cs :)
using Microsoft.EntityFrameworkCore;

namespace $project-name.Models.Data {

    public partial class DataStore {

        public DataStore(DbContextOptions<DataStore> options) : base(options) {
        }
    }
}
(:)

(: edit-insert-before | $project-folder | Startup.cs | namespace :)
using Microsoft.EntityFrameworkCore;
using $project-name.Models.Data;

(:)

(: edit-insert-before-block-end | $project-folder | Startup.cs | public void ConfigureServices | } :)
            services.AddDbContext<DataStore>(options => options.UseMySql(Configuration.GetConnectionString("DataStore")));

(:)